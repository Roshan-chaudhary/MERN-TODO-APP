1. Install Triviy in our Local Machine 

sudo snap install trivy              // write in Termina Local 
trivy fs --format table .            // In our Terminal


// write in github actions code  of Triviy

    # Scan Docker image using Trivy Action (You can adjust severity levels as needed)
    - name: Scan Docker Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: backend:06             # Use the correct image reference
        format: table                     # Use table , json , yaml etc
        severity: CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN   
        ignore-unfixed: false


   



2. Grafana install 

docker pull grafana/grafana

docker run -d -p 3001:3001 --name=grafana grafana/grafana

user name : admin
password  : admin

Password : roshan@123AWS








//   Code 


const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv').config();
const cors = require('cors');

const app = express();
//use express.json() to get data into json format
app.use(express.json());
//Port 
const PORT = process.env.PORT || 5500;

//use cors
app.use(cors())

//import routes
const TodoItemRoute = require('./routes/todoItems');


//connect to mongodb ..
mongoose.connect("mongodb+srv://roshanchy678910:8uf3Li4fC9QLijGf@cluster0.ojex6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
.then(()=> console.log("Database connected"))
.catch(err => console.log(err))


app.use('/', TodoItemRoute)



//connect to server
app.listen(PORT, ()=> console.log("Server connected") );




















//        const express = require('express');
const mongoose = require('mongoose');
const AWS = require('aws-sdk');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());
const PORT = process.env.PORT || 5500;

// AWS SDK to fetch MongoDB URL
const ssm = new AWS.SSM({ region: 'us-east-1' }); // Replace with your region



async function getMongoDBURL() {
    const params = { Name: '/my-app/mongodb-url', WithDecryption: true }; // Replace with your parameter name
    const result = await ssm.getParameter(params).promise();
    return result.Parameter.Value;
}

(async () => {
    try {
        const MONGO_URI = await getMongoDBURL();
        await mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });
        console.log("Database connected");



        const TodoItemRoute = require('./routes/todoItems');
        app.use('/', TodoItemRoute);

        app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
    } catch (error) {
        console.error("Error:", error);
    }
})();
